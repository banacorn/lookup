{"version":3,"sources":["webpack:///webpack/bootstrap b160eb816665f9e2b539","webpack:///./src/chrome/background.ts"],"names":[],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b160eb816665f9e2b539\n **/","type TabID = number;\n\nclass Status {\n    private lastInjected: TabID;\n    private connected: {};\n    constructor() {\n        this.connected = {};\n    }\n\n    // the last injected tab id\n    set tabID(id: TabID) {\n        this.lastInjected = id;\n    }\n\n    get tabID(): TabID {\n        return this.lastInjected;\n    }\n\n    // connected tabs\n    register(id: TabID) {\n        this.connected[id] = true;\n    }\n    unregister(id: TabID) {\n        delete this.connected[id]\n    }\n    shouldReInject(id: TabID): boolean {\n        return this.connected[id] === true;\n    }\n}\n\nconst connectionStatus = new Status;\n\n// the switchboard operator, that listens to all established connections coming in\nconst operator = (conn: any) => {\n    switch (conn.name) {\n        case \"woerterbuch-panel\":\n            panelListener(conn);\n            break;\n        case \"woerterbuch-injected\":\n            injectedListener(conn);\n            break;\n    }\n};\n\nconst injectScript = (tabID: TabID) => {\n    chrome.tabs.get(tabID, () => {\n        chrome.tabs.executeScript(tabID, { file: \"./dist/injected.js\" });\n        connectionStatus.tabID = tabID;\n    })\n}\n\nconst panelListener = (conn: any) => {\n    let tabID: TabID = null;\n    // assign the listener function to a variable so we can remove it later\n    const onMessage = (message: any) => {\n        console.info(message.tabId, \"injected\");\n        injectScript(message.tabId);\n        tabID = message.tabId;\n        connectionStatus.register(tabID);\n    };\n    conn.onMessage.addListener(onMessage);\n    conn.onDisconnect.addListener(() => {\n        console.info(tabID, \"removed\");\n        connectionStatus.unregister(tabID);\n        conn.onMessage.removeListener(onMessage);\n    });\n};\n\nconst injectedListener = (conn: any) => {\n    const tabID = connectionStatus.tabID;\n    // assign the listener function to a variable so we can remove it later\n    const onMessage = (message: any) => {\n    };\n    conn.onMessage.addListener(onMessage);\n    conn.onDisconnect.addListener(() => {\n        conn.onMessage.removeListener(onMessage);\n        // determine if the content script should be re-injected\n        if (connectionStatus.shouldReInject(tabID)) {\n            injectScript(tabID);\n        }\n    });\n};\n\n// starts listening to all incoming connections\nchrome.runtime.onConnect.addListener(operator);\n\n// unregister the tab when it's removed\nchrome.tabs.onRemoved.addListener((tabID: TabID) => {\n    connectionStatus.unregister(tabID);\n})\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chrome/background.ts\n **/"],"sourceRoot":""}