{"version":3,"sources":["webpack:///webpack/bootstrap 70c88e0a6fadd058684c?5d19","webpack:///./src/test/main.ts","webpack:///./src/test/util.ts?af31","webpack:///external \"fs\"?2e09","webpack:///external \"util\"?70c5","webpack:///external \"colors\"?a198","webpack:///external \"request\"?463d","webpack:///./src/chrome/parser.ts","webpack:///external \"lodash\"","webpack:///./src/types.ts","webpack:///external \"xmldom\""],"names":[],"mappings":"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","file":"test.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 70c88e0a6fadd058684c\n **/","// import * as _ from 'lodash';\nimport { search, debug } from './util';\nimport { parseXML, parseDocument } from '../chrome/parser';\n// import { parser, parseXML, groupByHeader, truncate } from '../chrome/parser';\nimport { Section } from '../types';\n\nconst word = process.argv[2];\n\nif (word) {\n    search(word, (body) => {\n        console.log('=================================================='.magenta)\n        console.time('parse')\n        const doc = parseXML(body);\n        console.timeEnd('parse')\n        console.time('build')\n        const section = parseDocument(doc);\n        console.timeEnd('build')\n        debug(section.subs.length)\n        debug(section.subs[0].subs[0].body.length)\n        debug(section)\n        // Array.prototype.slice.call(section.subs[0].subs[0].body[0].childNodes).forEach((node: Node, i: number) => {\n        //     if (i === 1) {\n        //         console.log(node.childNodes[0].childNodes[0])\n        //     }\n        //     // console.log(`[${node.textContent}]`)\n        //     // debug(node.nodeName)\n        //     // console.log(node)\n        // })\n\n        // debug(section.subs.length)\n        // console.log(result.documentElement.childNodes[3].nodeName)\n        // const contentNodeList: NodeList = result.documentElement.childNodes[3].childNodes[5].childNodes[9].childNodes;\n        // console.log(contentNodeList[1])\n        // Array.prototype.slice.call(contentNodeList).forEach((node: Node) => {\n        //     console.log(node.nodeName)\n        // })\n    })\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/test/main.ts\n **/","import * as fs from 'fs';\nimport { inspect } from 'util';\nimport 'colors';\nvar request = require('request');\n\nexport function debug(s: any) {\n    const t: string = inspect(s, false, null);\n    console.log(t.cyan)\n}\n\nexport function debugGreen(s: any) {\n    const t: string = inspect(s, false, null);\n    console.log(t.green)\n}\n\nexport function fetch(word: string, callback: (s: string) => void) {\n    console.log(`fetching ${word}`.gray)\n    request(`http://en.wiktionary.org/w/index.php?title=${word}&printable=true`, (error: Error, response: any, body: any) => {\n        if (!error && response.statusCode == 200) {\n            console.log(`${word} fetched`.gray)\n            callback(body);\n            fs.writeFile(`corpse/${word}`, body);\n        } else {\n            console.log(`fetching ${word} failed`.gray, response.statusCode)\n        }\n    })\n}\n\nexport function search(word: string, callback: (s: string) => void) {\n    fs.readFile(`corpse/${word}`, (err, data) => {\n        if (err && err.errno === -2) {\n            console.log(`${word} not found`.gray)\n            fetch(word, callback);\n        } else {\n            callback(data.toString());\n        }\n    })\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/test/util.ts\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 3\n ** module chunks = 0 1\n **/","module.exports = require(\"util\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"util\"\n ** module id = 4\n ** module chunks = 0 1\n **/","module.exports = require(\"colors\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"colors\"\n ** module id = 5\n ** module chunks = 0 1\n **/","module.exports = require(\"request\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"request\"\n ** module id = 6\n ** module chunks = 0 1\n **/","import * as _ from 'lodash'\nimport { DOMParserStatic } from 'xmldom';\nimport { Section, LanguageSection, InlineElem, BlockElem, mapSection, blockToText } from '../types'\n\nfunction isHeader(s: string, level?: number): boolean {\n    const match = s.match(/^[Hh](\\d)+$/);\n    if (match) {\n        if (level) {\n            return parseInt(match[1]) === level;\n        } else {\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst notIgnorable = (node: Node) => {\n    const isComment = node.nodeType === 8;\n    const isTextAndEmpty = node.nodeType == 3 && !/[^\\t\\n\\r ]/.test(node.textContent);\n    return !(isComment || isTextAndEmpty);\n}\n\nexport function parseXML(raw: string): Document {\n    if (typeof window === 'undefined') {\n        // in nodejs\n        const DOMParser: DOMParserStatic = require('xmldom').DOMParser;\n        return new DOMParser().parseFromString(raw, 'text/html')\n    } else {\n        // in browser\n        return new DOMParser().parseFromString(raw, 'text/html')\n    }\n}\n\nexport function parseDocument(doc: Document): Section<BlockElem[]> {\n    const contentNode: Node = doc.getElementById('mw-content-text');\n    const nodeList: Node[] = Array.prototype.slice.call(contentNode.childNodes);\n    return buildSection(nodeList, \"Entry\", 2);\n}\n\nexport default function parse(raw: string): LanguageSection[] {\n    const entry = parseDocument(parseXML(raw));\n    return entry.subs.map(s => ({\n        languageName: s.name,\n        subs: s.subs\n        // subs: s.subs.map(sectionToText)\n    }))\n}\n\n\n// given a NodeList, build a tree with headers as ineteral nodes\nfunction buildSection(list: Node[], name: string, level: number): Section<BlockElem[]> {\n\n    let intervals: number[] = [];\n    list.forEach((node, i) => {\n        if (isHeader(node.nodeName, level))\n            intervals.push(i);\n    });\n    if (intervals.length > 0) {\n        const body = _.take(list, intervals[0])\n            .filter(notIgnorable)\n            .map(parseBlockElem)\n            // .map(blockToText)\n            // .join('');\n        const subs = intervals.map((start, i) => {\n            const name = list[start].childNodes[0].textContent;\n            let interval: [number, number];\n            if (i === intervals.length - 1) {  // last inteval\n                interval = [start + 1, list.length];\n            } else {\n                interval = [start + 1, intervals[i + 1]];\n            }\n            const segment = list.slice(interval[0], interval[1]);\n            return buildSection(segment, name, level + 1);\n        });\n        return {\n            name: name,\n            body: body,\n            subs: subs\n        }\n\n    } else {\n        const body = list\n            .filter(notIgnorable)\n            .map(parseBlockElem)\n            // .map(blockToText)\n            // .join('');\n        return {\n            name: name,\n            body: body,\n            subs: []\n        }\n    }\n}\n\nfunction toArray(nodes: NodeList): Node[] {\n    return Array.prototype.slice.call(nodes);\n}\n\nfunction parseBlockElem(node: Node): BlockElem {\n    switch (node.nodeName) {\n        case 'p':\n        case 'P':\n            return <BlockElem>({\n                kind: 'paragraph',\n                body: _.flatten(toArray(node.childNodes).map(parseInline))\n            })\n        default:\n            return <BlockElem>({\n                kind: 'paragraph',\n                body: _.flatten(toArray(node.childNodes).map(parseInline))\n            })\n    }\n}\n\nfunction parseInline(node: Node): InlineElem[] {\n    switch (node.nodeName) {\n        // induction case: subtree of inline elements\n        case 'span':\n        case 'SPAN':\n            return _.flatten(toArray(node.childNodes).map(parseInline));\n        // plain text node\n        case '#text':\n            return <InlineElem[]>[{\n                kind: 'plain',\n                text: node.textContent\n            }]\n        // italic\n        case 'i':\n        case 'I':\n            return <InlineElem[]>[{\n                kind: 'italic',\n                body: _.flatten(toArray(node.childNodes).map(parseInline))\n            }]\n        default:\n            return <InlineElem[]>[{\n                kind: 'plain',\n                text: `<${node.nodeName}>${node.textContent}</${node.nodeName}>\\n`\n            }]\n    }\n}\n\nexport function sectionToText(s: Section<BlockElem[]>): Section<string> {\n    return mapSection(blocks => blocks.map(blockToText).join(''), s);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/chrome/parser.ts\n **/","module.exports = require(\"lodash\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"lodash\"\n ** module id = 8\n ** module chunks = 1\n **/","export type State = {\n    word: string,\n    body: LanguageSection[]\n}\n\nexport type Section<T> = {\n    name: string,\n    body: T,\n    subs: Section<T>[]\n}\n\nexport type BlockElem = Block.Paragraph;\nexport namespace Block {\n    export interface Paragraph {\n        kind: 'paragraph',\n        body: InlineElem[]\n    }\n}\n\nexport type InlineElem = Inline.Plain | Inline.Italic;\nexport namespace Inline {\n    export interface Plain {\n        kind: 'plain',\n        text: string\n    }\n    export interface Italic {\n        kind: 'italic',\n        body: InlineElem[]\n    }\n}\n\n\nexport type LanguageSection = {\n    languageName: string,\n    subs: Section<BlockElem[]>[]\n}\n\nexport function mapSection<T, U>(f: (t: T) => U, {name, body, subs}: Section<T>): Section<U> {\n    return {\n        name,\n        body: f(body),\n        subs: subs.map(s => mapSection(f, s))\n    }\n}\n\nexport function inlineToText(x: InlineElem): string {\n    switch (x.kind) {\n        case 'plain':\n            return x.text;\n        case 'italic':\n            return x.body.map(inlineToText).join('');\n        default:\n            return '';\n    }\n}\n\nexport function blockToText(node: BlockElem): string {\n    switch (node.kind) {\n        case 'paragraph':\n            return node.body.map(inlineToText).join('');\n        default:\n            return \"<unknown block element>\";\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/types.ts\n **/","module.exports = require(\"xmldom\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"xmldom\"\n ** module id = 10\n ** module chunks = 1\n **/"],"sourceRoot":""}